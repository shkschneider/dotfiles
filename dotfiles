#!/usr/bin/env bash

VERBOSE=false
case $1 in
  -v|--verbose) VERBOSE=true ; shift ;;
esac

set -- $(find .* -maxdepth 0 | tail +3 | grep -v '.git')

function _backup() {
  local dotfile=$1
  $VERBOSE && echo "mv --force $HOME/$dotfile $HOME/.config/backup/"
  mv -f $HOME/$dotfile $HOME/.config/backup/ >/dev/null
}

function _remove() {
  local dotfile=$1
  $VERBOSE && echo "rm --force $HOME/$dotfile"
  rm -f $HOME/$dotfile >/dev/null
}

function _link() {
  local dotfile=$1
  if [ $dotfile == ".nanorc" ] ; then
    $VERBOSE && echo "bash $dotfile > $HOME/$dotfile"
    cat $dotfile | cut -c3- | bash > "$HOME/$dotfile"
  else
    $VERBOSE && echo "ln --symbolic $PWD/$dotfile $HOME/$dotfile"
    ln -s $PWD/$dotfile $HOME/$dotfile >/dev/null
  fi
}

function _dotdir() {
  for dotfile in $(find $1/* -maxdepth 0 | grep -v '.git' | grep -v 'README.md') ; do
    _dotfile $dotfile
  done
}

function _dotfile() {
  local dotfile=$1
  $VERBOSE || echo $dotfile
  if [ -e $HOME/$dotfile ] ; then
    if [ -L $HOME/$dotfile ] ; then
      _remove $dotfile
      _link $dotfile
    elif [ -d $HOME/$dotfile ] ; then
      _dotdir $dotfile
    else
      _backup $dotfile
      _link $dotfile
    fi
  else
    _link $dotfile
  fi
}

git submodule update --init >/dev/null || exit 1

for dotfile in "$@" ; do
  _dotfile $dotfile
done

$VERBOSE || echo $HOME/.config/backup
$VERBOSE && find $HOME/.config/backup 2>/dev/null

# EOF
