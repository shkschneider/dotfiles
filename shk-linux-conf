#!/bin/bash
#
# shk-linux-conf -- shk configuration files updater
# Copyright (C) 2012  Alan SCHNEIDER
#                     <shk.schneider[at]gmail.com>
#
# This program comes with ABSOLUTELY NO WARRANTY.
# This is free software, and you are welcome to redistribute it
# under certain conditions.
#

github_user="shkschneider"
github_repo="linux_conf"
repo_branch="master"
force="false"

function usage() {
    echo "Usage: shk-linux-conf [OPTIONS] <COMMAND>" >&2
    echo "       Options:" >&2
    echo "                --user=GITHUB_USER" >&2
    echo "                --repo=GITHUB_REPO" >&2
    echo "                --branch=REPO_BRANCH" >&2
    echo "                --force" >&2
    echo "       Commands:" >&2
    echo "                list" >&2
    echo "                check [GITHUB_FILE ...]" >&2
    echo "                update [GITHUB_FILE ...]" >&2
    exit 1
}

[ $# -eq 0 ] && usage

for argv in $@ ; do
    var=$(echo $argv | cut -d'=' -f1)
    value=$(echo $argv | cut -d'=' -f2-)
    case $var in
	"--user") github_user="$value" && shift ;;
	"--repo") github_repo="$value" && shift ;;
	"--branch") repo_branch="$value" && shift ;;
	"--force") force="true" && shift ;;
	"--") shift && break ;;
    esac
done

[ -z "$github_user" ] || [ -z "$github_repo" ] || [ -z "$repo_branch" ] && usage

index=0
errors=0
downloads=0
local_files_array=()
local_tags_array=()
remote_files_array=()
remote_url_array=()
remote_paths_array=()
remote_realpaths_array=()
remote_tags_array=()

function get_file() {
    local flag="$1"
    local remote="$2"
    local local="$3"
    local dir=$(dirname "$local")
    local tmp="/tmp/$(basename "$local")"
    [ ! -w "$dir" ] && printf "shk-linux-conf: $dir: permission denied\n" >&2 && errors=$(($errors + 1)) && return
    mkdir -p "$dir"
    if [ -n "$flag" ] ; then
	printf "  [$flag] '$remote' -> '$local'\n"
    else
	printf "  '$remote' -> '$local'\n"
    fi
    curl -s "$remote" > "$tmp"
    downloads=$(($download + 1))
    if [ $? -ne 0 ] || [ ! -f "$tmp" ] ; then
	local size=0
    else
	local size=$(stat -c %s "$tmp")
    fi
    if [ $size -ne 0 ] ; then
	mv "$tmp" "$local" >/dev/null
    else
	errors=$(($errors + 1))
	printf "  download failed\n" >&2
    fi
}

function get_local_infos() {
    local path="$1"
    local file=$(basename "$path")
    if [ ! -f "$path" ] ; then
	local tag="0"
    else
        [ ! -r "$path" ] || [ ! -w "$path" ] && printf "shk-linux-conf: $path: permission denied\n" >&2 && errors=$(($errors + 1)) && return 0
	local tag=$(cat "$path" | egrep '^\S+ \S+ r[0-9]+$' | cut -d' ' -f3 | cut -c2-)
    fi
    if [ -n "$tag" ] ; then
	local_files_array[$index - 1]="$file"
	local_tags_array[$index - 1]="$tag"
	return 1
    fi
    local_files_array[$index - 1]="$file"
    local_tags_array[$index - 1]="0"
    return 0
}

function get_remote_infos() {
    local url="https://raw.github.com/$github_user/$github_repo/$repo_branch/$file"
    local tag=$(curl -s "$url" | egrep '^\S+ \S+ r[0-9]+$')
    local path=$(echo "$tag" | cut -d' ' -f2)
    local realpath=$(echo "$path" | sed -r "s#^~#$HOME#")
    local tag=$(echo "$tag" | cut -d' ' -f3 | cut -c2-)
    if [ -n "$tag" ] ; then
	remote_files_array[$index]="$file"
	remote_url_array[$index]="$url"
	remote_paths_array[$index]="$path"
	remote_realpaths_array[$index]="$realpath"
	remote_tags_array[$index]="$tag"
	index=$(($index + 1))
	return 1
    fi
    return 0
}

function list() {
    local uri="$1"
    local brief="$2"
    [ -z "$uri" ] && return
    while read line ; do
        if [ -n "$(echo $line | egrep "/$github_user/$github_repo/blob/[0-9a-f]+/\S+")" ] ; then
	    file=$(echo "$line" | sed -r "s#^.+/$github_user/$github_repo/blob/[0-9a-f]+/(\S+)\".+\$#\1#")
	    get_remote_infos "$file"
	    if [ $? -eq 1 ] ; then
	        get_local_infos "${remote_realpaths_array[$index - 1]}"
                if [ -n "$brief" ] ; then
                    show_brief_infos $(($index - 1))
                else
                    show_infos $(($index - 1))
                fi
	    fi
        elif [ -n "$(echo $line | egrep "/$github_user/$github_repo/tree/[0-9a-f]+/\S+")" ] ; then
	    dir=$(echo "$line" | sed -r "s#^.+/$github_user/$github_repo/tree/[0-9a-f]+/(\S+)\".+\$#\1#")
            list "/tree/$repo_branch/$dir" "$brief"
        fi
    done < <(curl -s "https://github.com/$github_user/$github_repo$uri" | grep "href=" | grep -v "rel='permalink'" | grep -v "Breadcrumb" | egrep "/[0-9a-f]+/")
}

function show_brief_infos() {
    local i=$1
    printf "[${remote_files_array[$i]}] ${remote_paths_array[$i]}\n"
}

function show_infos() {
    local i=$1
    printf "[${remote_files_array[$i]}] ${remote_paths_array[$i]} <local r${local_tags_array[$i]} | r${remote_tags_array[$i]} remote> -- "
    if [ -n "${local_tags_array[$i]}" ] ; then
        if [ ${local_tags_array[$i]} -eq 0 ] ; then
	    printf "file not found\n"
	    if [ $force = "true" ] ; then
                if [ $cmd = "--check" ] ; then
                    printf "  [force] will download\n"
                elif [ $cmd = "--update" ] ; then
                    get_file "force" "${remote_url_array[$i]}" "${remote_realpaths_array[$i]}"
                fi
            fi
        elif [ ${local_tags_array[$i]} -eq ${remote_tags_array[$i]} ] ; then
	    printf "up to date\n"
        elif [ ${local_tags_array[$i]} -lt ${remote_tags_array[$i]} ] ; then
	    printf "update available\n"
            if [ $cmd = "--check" ] ; then
	        printf "  will update\n"
            elif [ $cmd = "--update" ] ; then
	        get_file "" "${remote_url_array[$i]}" "${remote_realpaths_array[$i]}"
            fi
        else
	    printf "something is wrong\n"
	    if [ $force = "true" ] ; then
                if [ $cmd = "--check" ] ; then
                    printf "  [force] will download\n"
                elif [ $cmd = "--update" ] ; then
                    get_file "force" "${remote_url_array[$i]}" "${remote_realpaths_array[$i]}"
                fi
            fi
        fi
    else
	printf "something is wrong\n"
    fi
}

cmd="$1"
shift
url="https://github.com/$github_user/$github_repo/"
http=$(curl -sI "$url" | egrep '^HTTP')
http_code=$(echo "$http" | cut -d' ' -f2)
http_status=$(echo "$http" | cut -d' ' -f3- | tr -d "\n")
case $http_code in
    "") echo "shk-linux-conf: $url: connexion problem" >&2 && exit 1 ;;
    "403"|"404") echo "shk-linux-conf: $url: $http_code - $http_status" >&2 && exit 1 ;;
    *) echo "$github_user@github:$github_repo/$repo_branch" ;;
esac

case $cmd in
    "list")
        [ $# -ne 0 ] && usage
	list "/" "--brief"
	;;
    "check"|"update")
	if [ $# -eq 0 ] ; then
	    list "/"
	else
	    for file in $@ ; do
		get_remote_infos "$file"
		if [ $? -eq 1 ] ; then
		    get_local_infos "${remote_realpaths_array[$index - 1]}"
                    show_infos $(($index - 1))
		else
		    errors=$(($errors + 1))
		    echo "$file: no such remote file" >&2
		fi
	    done
	fi
	;;
    "--help")
	usage
	;;
    *)
	echo "shk-linux-conf: $cmd: unknown command" >&2
	usage
	;;
esac

echo "$index remote files parsed, $downloads downloaded ($errors errors)"

# EOF
