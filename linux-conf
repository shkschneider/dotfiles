#!/bin/bash
#
# linux-conf -- linux configuration files updater
# Copyright (C) 2012  Alan SCHNEIDER
#                     <shk.schneider[at]gmail.com>
#
# This program comes with ABSOLUTELY NO WARRANTY.
# This is free software, and you are welcome to redistribute it
# under certain conditions.
#

dir=$(pwd)
verbose="false"
overwrite="false"
force="false"

function usage() {
    echo "Usage: linux-conf [--force] <COMMAND>" >&2
    echo "       Options:" >&2
    echo "                --dir=<DIR>" >&2
    echo "                --verbose" >&2
    echo "                --overwrite" >&2
    echo "                --force" >&2
    echo "       Commands:" >&2
    echo "                list" >&2
    echo "                check [FILE ...]" >&2
    echo "                update [FILE ...]" >&2
    exit 1
}

[ $# -eq 0 ] && usage

for argv in $@ ; do
    var=$(echo $argv | cut -d'=' -f1)
    value=$(echo $argv | cut -d'=' -f2-)
    case $var in
        "--dir") dir="$value" && shift ;;
        "--verbose") verbose="true" && shift ;;
        "--overwrite") overwrite="true" && shift ;;
	"--force") force="true" && shift ;;
	"--") shift && break ;;
    esac
done
[ "$force" = "true" ] && overwrite="true"

[ -z "$dir" ] && echo "linux-conf: no directory provided" >&2 && usage
[ ! -e "$dir" ] && echo "linux-conf: $dir: no such file or directory" >&2 && exit 1
[ ! -d "$dir" ] && echo "linux-conf: $dir: not a directory" >&2 && exit 1
[ ! -r "$dir" ] && echo "linux-conf: $dir: permission denied" >&2 && exit 1

function check() {
    [ -n "$1" ] && echo -n "[$1] "
    echo "$skelpath r$skeltag -> $syspath"
}

function update() {
    [ -e "$syspath" ] && [ ! -w "$syspath" ] && echo "linux-conf: $syspath: permission denied" >&2 && return
    [ -n "$1" ] && echo -n "[$1] "
    dirname=$(echo $syspath | rev | cut -d'/' -f2- | rev)
    [ ! -d "$dirname" ] && mkdir -p "$dirname" >/dev/null
    echo "$skelpath r$skeltag -> $syspath"
    cp "$skelpath" "$syspath" >/dev/null || return
}

function work() {
    local mime tag_line
    [ $(find "$2" | sed '1d' | wc -l | sed -r 's/^\s+//') -eq 0 ] && echo "linux-conf: $2: directory if empty" >&2 && return
    for skelpath in $2/* ; do
        [ -d "$skelpath" ] && work $1 "$skelpath" && continue
        mime=$(file -i "$skelpath" | cut -d' ' -f2 | cut -d'/' -f1)
        [ "_$mime" != "_text" ] && echo "linux-conf: $2: mime type not supported" >&2 && continue
        tag_line=$(egrep '^[^\s]+ .+ r[0-9]+$' "$skelpath")
        if [ -n "$tag_line" ] ; then
            skelname=$(basename "$skelpath")
            skeltag=$(echo $tag_line | cut -d' ' -f3 | cut -c2-)
            sysname=$(basename $skelpath)
            syspath=$(echo $tag_line | cut -d' ' -f2 | sed -r "s|^~|$HOME|")
            if [ "$1" = "list" ] ; then
                echo "[$skelname] $syspath r$skeltag"
                continue
            fi
            if [ ! -e "$syspath" ] ; then
                systag="-1"
            elif [ -d "$syspath" ] ; then
                echo "linux-conf: $syspath: is a directory" >&2
                continue
            elif [ ! -r "$syspath" ] ; then
                echo "linux-conf: $syspath: permission denied" >&2
                continue
            else
                tag_line=$(egrep '^[^\s]+ .+ r[0-9]+$' "$syspath")
                if [ -n "$tag_line" ] ; then
                    systag=$(echo $tag_line | cut -d' ' -f3 | cut -c2-)
                else
                    systag="0"
                fi
            fi
            if [ $systag -eq -1 ] ; then
                [ "$verbose" = "true" ] && echo "[$skelname] $syspath: file not found"
                if [ "$1" = "check" ] ; then
                    check ""
                elif [ "$1" = "update" ] ; then
                    update ""
                fi
            elif [ $systag -eq 0 ] ; then
                [ "$verbose" = "true" ] && echo "[$skelname] $syspath r$systag: tag not found (use --overwrite)"
                if [ "$overwrite" = "true" ] ; then
                    if [ "$1" = "check" ] ; then
                        check "overwrite"
                    elif [ "$1" = "update" ] ; then
                        update "overwrite"
                    fi
                fi
            elif [ $skeltag -lt $systag ] ; then
                [ "$verbose" = "true" ] && echo "[$skelname] $syspath r$systag: tag ahead (use --force)"
                if [ "$force" = "true" ] ; then
                    if [ "$1" = "check" ] ; then
                        check "force"
                    elif [ "$1" = "update" ] ; then
                        update "force"
                    fi
                fi
            elif [ $skeltag -gt $systag ] ; then
                [ "$verbose" = "true" ] && echo "[$skelname] $syspath r$systag: tag behind"
                if [ "$1" = "check" ] ; then
                    check ""
                elif [ "$1" = "update" ] ; then
                    update ""
                fi
            else
                [ "$verbose" = "true" ] && echo "[$skelname] $syspath r$systag: tag up to date"
            fi
        fi
    done
}

cmd="$1"
shift

case $cmd in
    "list")
        work "list" "$dir"
        ;;
    "check")
        work "check" "$dir"
        ;;
    "update")
        work "update" "$dir"
        ;;
    "--help")
	usage
	;;
    *)
	echo "linux-conf: $cmd: unknown command" >&2
	usage
	;;
esac

# EOF
