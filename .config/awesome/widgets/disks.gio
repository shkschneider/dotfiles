local lgi = require("lgi")
local gio = lgi.Gio
local gio_size = gio.FILE_ATTRIBUTE_FILESYSTEM_SIZE
local gio_used = gio.FILE_ATTRIBUTE_FILESYSTEM_USED

local function mounts()
  local mounts = {}
  for _, mount in ipairs(gio.unix_mounts_get()) do
    table.insert(mounts, gio.unix_mount_get_mount_path(mount))
  end
  return mounts
end

local function mountinfo(path)
  local mount = gio.unix_mount_at(path)
  if mount == nil then return nil end
  --local path = gio.unix_mount_get_mount_path(mount)
  local info = gio.File.new_for_path(path):query_filesystem_info(gio.FILE_ATTRIBUTE_FILESYSTEM_SIZE .. "," .. gio.FILE_ATTRIBUTE_FILESYSTEM_USED)
  return info:get_attribute_uint64(gio.FILE_ATTRIBUTE_FILESYSTEM_SIZE), info:get_attribute_uint64(gio.FILE_ATTRIBUTE_FILESYSTEM_USED)
end

local widget = wibox.widget.arc(beautiful.icon_disk)

tooltip(widget)

widget.tooltip.update = function (paths)
  local str = ""
  for _, path in ipairs(paths) do
    local _size, _unit = units(path[2])
    str = str .. markup.fg(beautiful.fg_focus, path[1]) .. " " .. markup.bold(markup.fg(beautiful.fg_focus, path[3]) .. "%") .. " (/" .. _size .. _unit .. ")\n"
  end
  widget.tooltip.markup = str:sub(1, -2)
end

widget.update = function ()
  local paths = {}
  for _, path in ipairs(mounts()) do
    local size, used = mountinfo(path)
    table.insert(paths, { path, size, used })
    widget.bar.value = used
  end
--[[
  for _, mount in ipairs(gio.unix_mounts_get()) do
    notify("mount", tostring(mount))
    local path = gio.unix_mount_get_mount_path(mount)
    local info = gio.File.new_for_path(path):query_filesystem_info(gio_size .. "," .. gio_used)
    if info then
      local size = info:get_attribute_uint64(gio_size)
      local used = info:get_attribute_uint64(gio_used)
      if size > 0 and used > 0 then
        local used = math.floor(100 * used / size)
        table.insert(paths, { path, size, used })
        widget.bar.value = used
      end
    end
  end
--]]
  widget.tooltip.update(paths)
end

awful.widget.watch("true", 60 * 60, function () widget:update() end)

widget:buttons(gears.table.join(
  awful.button({}, mouse_left, function () awful.spawn(defaults.disks) end)
))

return widget
